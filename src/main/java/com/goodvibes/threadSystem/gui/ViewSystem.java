package com.goodvibes.threadSystem.gui;

import com.goodvibes.threadSystem.service.ThreadSafe;
import com.goodvibes.threadSystem.util.LogFile;
import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;

public class ViewSystem extends JFrame {
    public JPanel PanelMain;
    private JTextField inputTableName;
    private JSpinner spinnerAmountPerLine;
    private JButton goButton;
    private JTextArea textAreaLogger;
    private JLabel JLabelTableName;
    private JLabel JLabelQtPerLine;

    Logger log;

    public ViewSystem(Logger logger) {
        log = logger;

        goButton.addActionListener(new ActionListener() {
            LogFile logFile = new LogFile();
            ThreadSafe threadsafe = new ThreadSafe();

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    // Job JNotify - IMPORTANT unfinished.
                    logFile.verifyFileLog();

                    log.info("------------------------- System Thread: Start --------------------------------");
                    log.info("Table Name: " + inputTableName.getText() + " " + "Amount Per Line: " + spinnerAmountPerLine.getValue().toString());

                    // Responsible for all delete work
                    threadsafe.go(log, inputTableName.getText(), Integer.parseInt(spinnerAmountPerLine.getValue().toString()));

                    // load logs in screen
                    textAreaLogger.setText(logFile.readLogFile(log));
                } catch (ClassNotFoundException ex) {
                    log.error("ClassNotFoundException: " + ex.getMessage());
                } catch (IOException ex) {
                    log.error("IOException: " + ex.getMessage());
                } catch (SQLException ex) {
                    log.error("SQLException: " + ex.getMessage());
                } catch (Exception ex) {
                    log.error(ex.getMessage());
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        PanelMain = new JPanel();
        PanelMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        JLabelTableName = new JLabel();
        JLabelTableName.setText("Enter the name of the table you want to delete data from");
        PanelMain.add(JLabelTableName, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(375, 16), null, 0, false));
        inputTableName = new JTextField();
        PanelMain.add(inputTableName, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        JLabelQtPerLine = new JLabel();
        JLabelQtPerLine.setText("Enter the maximum amount you want to delete per line");
        PanelMain.add(JLabelQtPerLine, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(375, 18), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        PanelMain.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textAreaLogger = new JTextArea();
        textAreaLogger.setText("");
        scrollPane1.setViewportView(textAreaLogger);
        goButton = new JButton();
        goButton.setText("Start");
        PanelMain.add(goButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerAmountPerLine = new JSpinner();
        PanelMain.add(spinnerAmountPerLine, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return PanelMain;
    }

}
